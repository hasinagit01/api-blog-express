version: '3.8'

services:
    app:
        build:
            context: .
            dockerfile: docker/app.dockerfile
        restart: unless-stopped
        ports:
            - '9999:9999'
        volumes:
            - .:/usr/src/app
            - /usr/src/app/node_modules
        depends_on:
            mysql:
                condition: service_healthy
            redis:
                condition: service_healthy
        environment:
            - NODE_ENV=${NODE_ENV}
            - SERVER_PORT=${SERVER_PORT}
            - DATABASE_URL=mysql://${DB_USER}:${DB_PASSWORD}@mysql:3306/${DB_NAME}
        networks:
            - app-network

    nginx:
        build:
            context: .
            dockerfile: docker/nginx.dockerfile
        volumes:
            - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
        ports:
            - '90:80'
        depends_on:
            - app
        networks:
            - app-network

    mysql:
        image: mysql:8.0
        restart: unless-stopped
        ports:
            - '3309:3306'
        environment:
            MYSQL_DATABASE: ${DB_NAME}
            MYSQL_USER: ${DB_USER}
            MYSQL_PASSWORD: ${DB_PASSWORD}
            MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
        volumes:
            - mysql-data:/var/lib/mysql
        networks:
            - app-network
        healthcheck:
            test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-p${DB_ROOT_PASSWORD}']
            interval: 10s
            timeout: 5s
            retries: 5

    phpmyadmin:
        image: phpmyadmin/phpmyadmin
        restart: unless-stopped
        ports:
            - '7070:80'
        environment:
            PMA_HOST: mysql
            PMA_PORT: 3306
            MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
            APACHE_SERVER_NAME: phpmyadmin.local
        depends_on:
            - mysql
        networks:
            - app-network

    redis:
        image: redis:alpine
        restart: unless-stopped
        ports:
            - '${REDIS_PORT}:6379'
        volumes:
            - redis-data:/data
        networks:
            - app-network
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 5s
            timeout: 5s
            retries: 5

networks:
    app-network:
        driver: bridge

volumes:
    mysql-data:
        driver: local
    redis-data:
        driver: local
